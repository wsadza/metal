
global:
  labels: []

proxy-gateway:
  enabled: false

# ------------------------------------------------------------------------------------
#
#   /$$$$$$   /$$$$$$  /$$$$$$$$ /$$   /$$ /$$$$$$$  /$$   /$$
#  /$$__  $$ /$$__  $$|__  $$__/| $$  | $$| $$__  $$| $$$ | $$
# | $$  \__/| $$  \ $$   | $$   | $$  | $$| $$  \ $$| $$$$| $$
# | $$      | $$  | $$   | $$   | $$  | $$| $$$$$$$/| $$ $$ $$
# | $$      | $$  | $$   | $$   | $$  | $$| $$__  $$| $$  $$$$
# | $$    $$| $$  | $$   | $$   | $$  | $$| $$  \ $$| $$\  $$$
# |  $$$$$$/|  $$$$$$/   | $$   |  $$$$$$/| $$  | $$| $$ \  $$
#  \______/  \______/    |__/    \______/ |__/  |__/|__/  \__/

coturn:
  enabled: true
  
  overrideName: 
  overrideLabels: []

# -----------------------------------
# Coturn - configuration 
# -----------------------------------

  configuration:
    realm: anykey.pl

    auth:
      username: user
      password: pass

    listeningIP: 0.0.0.0

    ports:
      min: 49152
      max: 65535
      listening: 3478 
      tlsListening: 5349  

# -----------------------------------
# Coturn - pod options
# -----------------------------------

  nodeSelector: 
    nvidia.com/gpu.count: "1"

  runtimeClassName: 

    #hostNetwork: true

# -----------------------------------
# Coturn - pod container (primary)
# -----------------------------------

  image:
    registry: ghcr.io/coturn
    repository: 
    package: coturn
    tag: edge-debian
    pullSecrets: []
    pullPolicy: Always 

  command: []

  args: 
    - "-c"
    - "/turnserver.conf"

  env: []

  ports:
    - containerPort: 3478 
      name: coturn-udp
      protocol: UDP
    - containerPort: 3478 
      name: coturn-tcp
      protocol: tcp 

  resources: []

  extraVolumesMounts:
    - name: metal-coturn-configuration
      mountPath: /turnserver.conf
      subPath: turnserver.conf

# -----------------------------------
# Coturn - pod containers (additionals)
# -----------------------------------

  sidecars: []

  initContainers: []

# -----------------------------------
# Coturn - pod volumes 
# -----------------------------------

  extraVolumes:
    - name: metal-coturn-configuration
      type: configMap

# -----------------------------------
# Coturn - networking - service
# -----------------------------------

  service:
    annotations: {}
    type: NodePort 
    ports:
      - name: coturn-udp
        port: 3478
        targetPort: 3478
        protocol: UDP 
        nodePort: 32000
      - name: coturn-tcp
        port: 3478
        targetPort: 3478
        protocol: TCP 
        nodePort: 32000

# -----------------------------------
# Coturn - networking - ingress 
# -----------------------------------

  ingress:

# -----------------------------------
# Coturn - probes 
# -----------------------------------

  startupProbe:
    enabled: false

# -----------------------------------
# Coturn - hpa
# -----------------------------------

  hpa:

# ------------------------------------------------------------------------------------
#
# $$\      $$\  $$$$$$\  $$\   $$\  $$$$$$\  $$\       $$$$$$\ $$$$$$$$\ $$\   $$\ 
# $$$\    $$$ |$$  __$$\ $$$\  $$ |$$  __$$\ $$ |      \_$$  _|\__$$  __|$$ |  $$ |
# $$$$\  $$$$ |$$ /  $$ |$$$$\ $$ |$$ /  $$ |$$ |        $$ |     $$ |   $$ |  $$ |
# $$\$$\$$ $$ |$$ |  $$ |$$ $$\$$ |$$ |  $$ |$$ |        $$ |     $$ |   $$$$$$$$ |
# $$ \$$$  $$ |$$ |  $$ |$$ \$$$$ |$$ |  $$ |$$ |        $$ |     $$ |   $$  __$$ |
# $$ |\$  /$$ |$$ |  $$ |$$ |\$$$ |$$ |  $$ |$$ |        $$ |     $$ |   $$ |  $$ |
# $$ | \_/ $$ | $$$$$$  |$$ | \$$ | $$$$$$  |$$$$$$$$\ $$$$$$\    $$ |   $$ |  $$ |
# \__|     \__| \______/ \__|  \__| \______/ \________|\______|   \__|   \__|  \__|

monolith:
  
  overrideName: 
  overrideLabels: []

# -----------------------------------
# Monolith - options
# -----------------------------------

  nodeSelector: 
    nvidia.com/gpu.count: "1"

  runtimeClassName: nvidia

# -----------------------------------
# Monolith - containers (primary)
# -----------------------------------

  # ghcr.io/wsadza/metal/full-ubuntu:1.0.0
  # ghcr.io/coturn/coturn:edge-debian
  image:
    registry: ghcr.io/wsadza
    repository: metal
    package: full-ubuntu
    tag: 1.0.0
    pullSecrets: []
    pullPolicy: Always 

  env: 
  - name: SELKIES_PORT
    value: "8080"
  - name: SELKIES_METRICS_HTTP_PORT
    value: "9090"
  - name: SUPERVISOR_PORT
    value: "9091"
  - name: DBUS_PORT
    value: "9092"
  - name: SELKIES_TURN_HOST
    value: "anykey.pl"
  - name: SELKIES_TURN_PORT
    value: "32000"
  - name: SELKIES_TURN_USERNAME
    value: "user"
  - name: SELKIES_TURN_PASSWORD
    value: "pass"
  - name: SELKIES_ENCODER
    value: "nvh264enc"
  - name: PRIME_RENDERER_GLOBAL
    value: "true" 
  - name: PULSE_SERVER 
    value: tcp:pipewire.metal.svc.cluster.local:4713
  - name: SELKIES_ENABLE_WEBRTC_STATISTICS
    value: "true"

  command: [ 
    "bash", 
    "-c", 
    "sudo sed -i 's/readiness_turn//g' /usr/bin/40_start_stream.sh && ./entrypoint.sh",
  ]
  #command: []

  ports: []
  #ports: 
  #- containerPort: 9090
  #  name: metrics

  resources:
    requests:
      memory: 5Gi 
      nvidia.com/gpu: 1
    limits:
      memory: 10Gi
      nvidia.com/gpu: 1

  extraVolumesMounts: 
    - name: shared-logs 
      mountPath: /run/user/1000/logs
      subPath: logs

# -----------------------------------
# Monolith - containers (additionals)
# -----------------------------------
  sidecars:

# helper-gateway
    - name: helper-gateway
      image: openresty:latest
      imagePullPolicy: Never
      command: [ 
        "bash", 
        "-c", 
        "cd /modules && mkdir logs && /usr/local/openresty/nginx/sbin/nginx -p ${PWD}/ -g \"daemon off;error_log /dev/stdout debug;\"", 
      ]
      ports: 
      - containerPort: 80
        name: helper-gateway
      volumeMounts:
        - name: configmap-helper-gateway
          mountPath: /modules/conf/nginx.conf
          subPath: nginx.conf
        - name: shared-logs
          mountPath: /tmp/shared-logs
          subPath: logs

# proxy-helper
#    - name: helper-proxy
#      image: nginx
#      ports: 
#      - containerPort: 80
#        name: helper-proxy 
#      volumeMounts:
#        - name: configmap-helper-proxy
#          mountPath: /etc/nginx/nginx.conf
#          subPath: nginx.conf

  initContainers: []

# -----------------------------------
# Monolith - volumes 
# -----------------------------------

  extraVolumes:
    - name: configmap-helper-gateway
      type: configMap

    - name: configmap-helper-proxy
      type: configMap

    - name: shared-logs 
      type: emptyDir

    - name: pvc-0
      type: persistentVolumeClaim
      spec:
        accessModes:
          - ReadWriteMany
        storage: 50Gi
        storageClassName: storage-local-retain
        volumeMount: /opt/config
        annotations:
          "helm.sh/resource-policy": "keep"

    - name: pvc-1
      type: persistentVolumeClaim
      spec:
        accessModes:
          - ReadWriteMany
        storage: 50Gi
        storageClassName: storage-local-retain
        volumeMount: /opt/config
        annotations:
          "helm.sh/resource-policy": "keep"

# -----------------------------------
# Monolith - networking
# -----------------------------------

  service:
    annotations: {}
    type: ClusterIP
    ports:
      - name: helper-gateway
        port: 80
        targetPort: 80
        protocol: TCP
#      - name: metrics
#        port: 9090
#        targetPort: 9090
#        protocol: TCP

  ingress:
    enabled: true 
    className: traefik
    annotations:
      "traefik.ingress.kubernetes.io/router.entrypoints": websecure
    path: "/"
    pathType: "Prefix"
    host: "monolithic.anykey.pl"
    portNumber: 80
    tls: [] 

# -----------------------------------
# Monolith - probes 
# -----------------------------------

  startupProbe:
    enabled: false 
    scheme: HTTP
    probePath: /health
    initialDelaySeconds: 5 
    periodSeconds: 5 
    successThreshold: 1
    failureThreshold: 5
    timeoutSeconds: 1

# -----------------------------------
# Monolith - hpa
# -----------------------------------

  hpa:

# keda - autoscaler
#   keda: []
    keda: 
      enabled: true 
      minReplicaCount: 1
      maxReplicaCount: 4
      triggers: 
        - type: prometheus
          metricType: Value
          metadata:
            serverAddress: http://prometheus-server.metal.svc.cluster.local
            query: scaling_needed
            threshold: "0.5"
      advanced:
        horizontalPodAutoscalerConfig:
          behavior:
            scaleUp:
              policies:
              - type: Pods
                value: 1  
                periodSeconds: 1  
              stabilizationWindowSeconds: 1 


# ------------------------------------------------------------------------------------
#
#  $$$$$$\ $$$$$$$\  $$$$$$$$\ $$\   $$\ $$$$$$$$\ $$$$$$\ $$$$$$$$\ $$\     $$\ 
#  \_$$  _|$$  __$$\ $$  _____|$$$\  $$ |\__$$  __|\_$$  _|\__$$  __|\$$\   $$  |
#    $$ |  $$ |  $$ |$$ |      $$$$\ $$ |   $$ |     $$ |     $$ |    \$$\ $$  / 
#    $$ |  $$ |  $$ |$$$$$\    $$ $$\$$ |   $$ |     $$ |     $$ |     \$$$$  /  
#    $$ |  $$ |  $$ |$$  __|   $$ \$$$$ |   $$ |     $$ |     $$ |      \$$  /   
#    $$ |  $$ |  $$ |$$ |      $$ |\$$$ |   $$ |     $$ |     $$ |       $$ |    
#  $$$$$$\ $$$$$$$  |$$$$$$$$\ $$ | \$$ |   $$ |   $$$$$$\    $$ |       $$ |    
#  \______|\_______/ \________|\__|  \__|   \__|   \______|   \__|       \__|  

identity-provider:
  enabled: false 

  auth:
    adminUser: "admin"
    adminPassword: "admin"
  
  extraEnvVars: |
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
      - name: REDIRECT_SOCKET
        value: 'proxy-https'
      - name: KEYCLOAK_FRONTEND_URL
        value: 'https://identity.anykey.pl/'
      - name: KC_HOSTNAME
        value: 'identity.anykey.pl'
      - name: KC_PROXY
        value: 'edge'
      - name: KC_HTTP_ENABLED
        value: 'true'
      - name: KC_HOSTNAME_HTTPS_STRICT
        value: 'false'
  
  ingress:
    enabled: true
    ingressClassName: traefik
    hostname: identity.anykey.pl
    annotations:
      "traefik.ingress.kubernetes.io/router.entrypoints": websecure
      "traefik.ingress.kubernetes.io/router.middlewares": default-keycloak-auth@kubernetescrd

  keycloakConfigCli:
    enabled: true
    existingConfigmap: "configmap-keycloak"

identity-proxy:
  enabled: false

# TRASH
# ----------------------------
#
#    - name: config
#      accessModes:
#        - ReadWriteMany
#      storage: 50Gi
#      storageClassName: storage-local-retain
#      volumeMount: /opt/config
#      annotations:
#        "helm.sh/resource-policy": "keep"
#  
#    - name: games 
#      accessModes:
#        - ReadWriteMany
#      storage: 200Gi
#      storageClassName: storage-local-retain
#      volumeMount: /opt/games
#      annotations:
#        "helm.sh/resource-policy": "keep"
